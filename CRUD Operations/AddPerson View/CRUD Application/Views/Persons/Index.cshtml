@using ServiceContracts.DTO
@using Service
@model IEnumerable<PersonResponse>
@{
	ViewBag.Title = "Persons";
}
<form action="~/persons/index" method="get"> @*the browser have to collect the 
	values from the form elements(textboxes & Dropdownlist)
	how to do it? use the name attribute inside the tag <select name="">
	and with this name only the value will be submitted
	<select name="searchBy"> --> searchBy= value user selected from the dropdownlist
	<input name="searchString">-->searchString= value entered in the textbox
	so assume user selected Person Name and in textbox writed a

	then QueryString of Form is searchBy=PersonName& searchString=a

	so the EQueryString is genereated automatically based on the values selected by user

	//so this QueryString is Submitted to the server as a part of the Get request 
	that the form made 

*@

	<a href="~/persons/create">Add person</a>


	<div class="box flex">
		@*search dropdown list*@
		<div class="flex-1">
			<select class="form-input" name="searchBy">
				@foreach (var field in ViewBag.SearchFields)
				{
					@*ther istwo properties here you can access the key and values pairs
					theyare--> Value , Key , likewe did here --> field.Key,field.Value
				*@
					@*you can define what you want to return using value property in the tag
					like we did here--><option value=@field.key>
				*@
					@*here field.Value means the Value from the Dict<Key,Value>*@
					@*the KEY will be taken as value which be submitted from the submit button*@
					if (field.Key== ViewBag.CurrentsearchBy)
					{
						<option  value="@field.Key" selected="selected">@field.Value </option>
					}
					else
					{
						<option   value="@field.Key">@field.Value </option>
					}

				}

				@*here we have to show the available attributes user can search*@
			</select>
		</div>
		@*search textbox*@
		<div class="flex-1">
			<input name="searchString" value="@ViewBag.CurrentsearchString" type="search" id="Search" class="form-input" placeholder="Search"/>
		</div>
		@*search Button*@
		@*wehaveto specify what will happen when the user clicks on the submit button
		we did that on the form tag , whenuser clicks the submit button, 
		the from tag will be proccessed forwhich action you put , and the method
	*@
		<div class="=flex-1">
			<button class="button button-blue-back">Search</button>
			<a href="~/persons/index" class="link-hover">Clear All</a>
		</div>
	</div>

	<table class="table w-100 mt">
		<thead> 
			<tr>
					@*initial values*@
					@* 	
					@if (ViewBag.CurrentsortBy==nameof(PersonResponse.PersonName)&& ViewBag.CurrentsortOrder==nameof(SortOrderEnum.ASC))
					{
						<a href="~/persons/index?searchBy=@ViewBag.CurrentsearchBy& searchString=@ViewBag.CurrentsearchString& 
						sortBy=@nameof(PersonResponse.PersonName)&sortOrder=@nameof(SortOrderEnum.DESC)">Person Name</a>
					}
					else if (ViewBag.CurrentsortBy==nameof(PersonResponse.PersonName)&& ViewBag.CurrentsortOrder==nameof(SortOrderEnum.DESC))
					{
						<a href="~/persons/index?searchBy=CurrentsearchBy&searchString=CurrentsearchString&
						sortBy=@nameof(PersonResponse.PersonName)& sortOrder=@nameof(SortOrderEnum.ASC)"></a>
					}
					else
					{
						<a href="~/persons/index?searchBy=CurrentsearchBy&searchString=CurrentsearchString&
						sortBy=@nameof(PersonResponse.PersonName)& sortOrder=@nameof(SortOrderEnum.ASC)"></a>
					} *@

					@*put the above code into the partial view andcreateit dynamic*@

					@await Html.PartialAsync("_GetHeaderLink", new ViewDataDictionary(ViewData)
					{
					{"ColumnName", nameof(PersonResponse.PersonName)},
					{"DisplayName", "Person Name"}
					})


					@await Html.PartialAsync("_GetHeaderLink", new ViewDataDictionary(ViewData)
					{
					{"ColumnName", nameof(PersonResponse.EmailAddress)},
					{"DisplayName", "Email Address"}
					})

					@await Html.PartialAsync("_GetHeaderLink", new ViewDataDictionary(ViewData)
					{
					{"ColumnName", nameof(PersonResponse.DateOfBirth)},
					{"DisplayName", "Date Of Birth"}
					})

					@await Html.PartialAsync("_GetHeaderLink", new ViewDataDictionary(ViewData)
					{
					{"ColumnName", nameof(PersonResponse.Gender)},
					{"DisplayName", "Gender"}
					})

					@await Html.PartialAsync("_GetHeaderLink", new ViewDataDictionary(ViewData)
					{
					{"ColumnName", nameof(PersonResponse.Age)},
					{"DisplayName", "Age"}
					})

					@await Html.PartialAsync("_GetHeaderLink", new ViewDataDictionary(ViewData)
					{
					{"ColumnName", nameof(PersonResponse.Country)},
					{"DisplayName", "Country"}
					})

					@await Html.PartialAsync("_GetHeaderLink", new ViewDataDictionary(ViewData)
					{
					{"ColumnName", nameof(PersonResponse.ReccivenewsLetters)},
					{"DisplayName", "ReccivenewsLetters"}
					})

						</tr>
					</thead>
					<tbody>
					@foreach (PersonResponse person in Model)
					{
						<tr>

					<td style="width:15%">@person.PersonName</td>
					<td style ="width:20%">@person.EmailAddress</td>
					<td style="width:9%">@person.DateOfBirth</td>
					<td style="width:15%">@person.Gender</td>
					<td style="width:9%">@person.Age</td>
					<td style ="width:10%">@person.Country</td>
					<td style ="width:20%">@person.ReccivenewsLetters</td>
												
					</tr>
					}
					</tbody>
				</table>
</form>
		
			
