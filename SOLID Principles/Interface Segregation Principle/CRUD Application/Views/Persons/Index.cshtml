@using ServiceContracts.DTO
@using Services
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model IEnumerable<PersonResponse>
@{
	ViewBag.Title = "Persons";
}
<form asp-controller="Persons" asp-action="index" >
	@*Breadcrumb starts*@
	<div class="flex">
		<div class="flex-1">
			<div class="text-grey">
				<span>Contacts</span>
				</div>
			<i class="fa-solid fa-caret-right"></i>
			<span class="text-grey">Persons</span>
		</div>
		<div class="flex-1 text-right" >
			<a asp-controller="Persons" asp-action="Create" class="button-link button-blue-back ml">Add person</a>
			<a asp-controller="Persons" asp-action="PersonsPDF" class="button-link button-blue-back ml">Download as PDF</a>
		</div>
	</div>
	@*Breadcrumb ends*@
	<div class="table-container">
		<div class="flex">
			<div class="flex-1"> <h1>Persons</h1></div>
			<div class="flex-3  text-right">
				<label>Search by:</label>
				<select class="search-dropdown" name="searchBy" style="width: 200px">
					@foreach (var field in ViewBag.SearchFields)
					{
						@*ther istwo properties here you can access the key and values pairs
					theyare--> Value , Key , likewe did here --> field.Key,field.Value
				*@
						@*you can define what you want to return using value property in the tag
					like we did here--><option value=@field.key>
				*@
						@*here field.Value means the Value from the Dict<Key,Value>*@
						@*the KEY will be taken as value which be submitted from the submit button*@
						if (field.Key == ViewBag.CurrentsearchBy)
						{
							<option value="@field.Key" selected="selected">@field.Value </option>
						}
						else
						{
							<option value="@field.Key">@field.Value </option>
						}

					}

					@*here we have to show the available attributes user can search*@
				</select>
				@*Search TextBox*@
				<input name="searchString" value="@ViewBag.CurrentsearchString" type="search" id="Search" class="search-text" placeholder="Search" style="width:200px" />
				@*search Button*@
				@*wehaveto specify what will happen when the user clicks on the submit button
		we did that on the form tag , whenuser clicks the submit button, 
		the from tag will be proccessed forwhich action you put , and the method
				*@
				<div class="=flex-1">
					<button class="search-button">Search</button>
					<a href="~/persons/index" class="ml link-hover">Clear All</a>
				</div>
			</div>
		</div>

		<table class="table w-100 mt persons">
			<thead>
				<tr>
					@*initial values*@
					@* 	
					@if (ViewBag.CurrentsortBy==nameof(PersonResponse.PersonName)&& ViewBag.CurrentsortOrder==nameof(SortOrderEnum.ASC))
					{
						<a href="~/persons/index?searchBy=@ViewBag.CurrentsearchBy& searchString=@ViewBag.CurrentsearchString& 
						sortBy=@nameof(PersonResponse.PersonName)&sortOrder=@nameof(SortOrderEnum.DESC)">Person Name</a>
					}
					else if (ViewBag.CurrentsortBy==nameof(PersonResponse.PersonName)&& ViewBag.CurrentsortOrder==nameof(SortOrderEnum.DESC))
					{
						<a href="~/persons/index?searchBy=CurrentsearchBy&searchString=CurrentsearchString&
						sortBy=@nameof(PersonResponse.PersonName)& sortOrder=@nameof(SortOrderEnum.ASC)"></a>
					}
					else
					{
						<a href="~/persons/index?searchBy=CurrentsearchBy&searchString=CurrentsearchString&
						sortBy=@nameof(PersonResponse.PersonName)& sortOrder=@nameof(SortOrderEnum.ASC)"></a>
					} *@

					@*put the above code into the partial view andcreateit dynamic*@

					@await Html.PartialAsync("_GetHeaderLink", new ViewDataDictionary(ViewData)
					{
						{ "ColumnName", nameof(PersonResponse.PersonName)},
										{ "DisplayName", "Person Name"}
					})


					@await Html.PartialAsync("_GetHeaderLink", new ViewDataDictionary(ViewData)
										{
						{ "ColumnName", nameof(PersonResponse.EmailAddress)},
										{ "DisplayName", "Email Address"}
					})

					@await Html.PartialAsync("_GetHeaderLink", new ViewDataDictionary(ViewData)
										{
						{ "ColumnName", nameof(PersonResponse.DateOfBirth)},
										{ "DisplayName", "Date Of Birth"}
					})

					@await Html.PartialAsync("_GetHeaderLink", new ViewDataDictionary(ViewData)
										{
						{ "ColumnName", nameof(PersonResponse.Gender)},
										{ "DisplayName", "Gender"}
					})

					@await Html.PartialAsync("_GetHeaderLink", new ViewDataDictionary(ViewData)
										{
						{ "ColumnName", nameof(PersonResponse.Age)},
										{ "DisplayName", "Age"}
					})

					@await Html.PartialAsync("_GetHeaderLink", new ViewDataDictionary(ViewData)
										{
						{ "ColumnName", nameof(PersonResponse.Country)},
										{ "DisplayName", "Country"}
					})

					@await Html.PartialAsync("_GetHeaderLink", new ViewDataDictionary(ViewData)
										{
						{ "ColumnName", nameof(PersonResponse.ReccivenewsLetters)},
										{ "DisplayName", "ReccivenewsLetters"}
					})
					<th>Actions </th>
				</tr>
			</thead>
			<tbody>
				@foreach (PersonResponse person in Model)
				{
					<tr>

						<td style="width:10%">@person.PersonName</td>
						<td style="width:20%">@person.EmailAddress</td>
						<td style="width:10%">@person.DateOfBirth?.ToString("dd MMM yyyy")</td>
						<td style="width:8%">@person.Gender</td>
						<td style="width:6%">@person.Age</td>
						<td style="width:10%">@person.Country</td>
						<td style="width:8%">@person.ReccivenewsLetters</td>
						<td style="width:15%">@person.Address</td>
						<td style="width:20%">
							<a asp-action="Edit" asp-controller="Persons" asp-route-personID="@person.PersonID" class="button-link button-blue-back">Edit</a>
							@*this is how you create your url to the edit view , you are passing the id of the person
							to the action method so it can recieve it in its parameter, ofcourse make the asp-route-<put here same parameter name as in action method>
						*@
						</td>
						<td>
							<a asp-action="Delete" asp-controller="Persons" asp-route-personID="@person.PersonID" class="button-link button-red-back">Delete</a>
						</td>

					</tr>
				}
			</tbody>
		</table>

	</div>

	@*the browser have to collect the 
	values from the form elements(textboxes & Dropdownlist)
	how to do it? use the name attribute inside the tag <select name="">
	and with this name only the value will be submitted

	<select name="searchBy"> --> searchBy= value user selected from the dropdownlist
	<input name="searchString">-->searchString= value entered in the textbox
	so assume user selected Person Name and in textbox writed a

	then QueryString of Form is searchBy=PersonName& searchString=a

	so the EQueryString is genereated automatically based on the values selected by user

	//so this QueryString is Submitted to the server as a part of the Get request 
	that the form made 

*@


</form>
		
			
